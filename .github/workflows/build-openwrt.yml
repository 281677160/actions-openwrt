#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/281677160/build-actions
# Description: Build OpenWrt using GitHub Actions
#

name: ÁºñËØëOpenWrtÂõ∫‰ª∂
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: 'ËØ∑ËæìÂÖ•ÊÇ®Ë¶ÅÁºñËØëÁöÑÊ∫êÁ†Å‰ªìÂ∫ì,ÊØîÂ¶ÇÔºö coolsnowwolf/lede'
        required: true
        default: ''
      REPO_BRANCH:
        description: 'ËØ∑ËæìÂÖ•Ê∫êÁ†ÅÁöÑÂàÜÊîØ,ÊØîÂ¶ÇÔºö master'
        required: true
        default: ''
      CONFIG_FILE:
        description: 'ËØ∑ËæìÂÖ•ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ,ÊØîÂ¶ÇÔºöbuild/seed/x86_64'
        required: true
        default: ''
      DIY_PART1:
        description: 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÊñá‰ª∂1Ë∑ØÂæÑ,ÊØîÂ¶ÇÔºöbuild/diy-part1.sh'
        required: true
        default: ''
      DIY_PART2:
        description: 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÊñá‰ª∂2Ë∑ØÂæÑ,ÊØîÂ¶ÇÔºöbuild/diy-part2.sh'
        required: true
        default: ''
      UPLOAD_RELEASE:
        description: 'ÂèëÂ∏ÉÂõ∫‰ª∂Âà∞ Releases'
        required: true
        default: 'false'
        type: boolean
      CACHEWRTBUILD_SWITCH:
        description: '‰øùÁïôÁºìÂ≠ò,Âä†ÈÄüÁºñËØë'
        required: true
        default: 'true'
        type: boolean


# ÂÆöÊó∂Ëß¶ÂèëÂºÄÂêØÂºÄÂßãÁºñËØë(Êää‰∏ãÈù¢‰∏§‰∏™#ÂéªÊéâÂºÄÂêØ)
#  schedule:
#   - cron: 25 17 * * *


jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Ê£ÄÊµãÊñá‰ª∂
      run: |
        echo "GIT_REPOSITORY=${{ github.repository }}" >> ${GITHUB_ENV}
        echo "REPO_TOKEN=${{ secrets.REPO_TOKEN }}" >> ${GITHUB_ENV}
        echo "REPO_URL=https://github.com/${{ inputs.REPO_URL }}" >> ${GITHUB_ENV}
        echo "REPO_BRANCH=${{ inputs.REPO_BRANCH }}" >> ${GITHUB_ENV}
        echo "CONFIG_FILE=${{ inputs.CONFIG_FILE }}" >> ${GITHUB_ENV}
        echo "DIY_PART1=${{ inputs.DIY_PART1 }}" >> ${GITHUB_ENV}
        echo "DIY_PART2=${{ inputs.DIY_PART2 }}" >> ${GITHUB_ENV}
        echo "UPLOAD_RELEASE=${{ inputs.UPLOAD_RELEASE }}" >> ${GITHUB_ENV}
        echo "CACHEWRTBUILD_SWITCH=${{ inputs.CACHEWRTBUILD_SWITCH }}" >> ${GITHUB_ENV}

    - name: ÈÉ®ÁΩ≤ÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo /bin/bash ${GITHUB_WORKSPACE}/common/ubuntu.sh
        sudo timedatectl set-timezone "Asia/Shanghai"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: ÊãâÂèñÊ∫êÁ†Å
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: ËØªÂèñÊâ©Â±ïÊñá‰ª∂1
      run: |
        cd openwrt
        [ -f "$FEEDS_CONF" ] && mv $FEEDS_CONF feeds.conf.default
        chmod +x $DIY_PART1
        $GITHUB_WORKSPACE/$DIY_PART1

    - name: Êõ¥Êñ∞ feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: ÂÆâË£Ö feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: ËØªÂèñÊâ©Â±ïÊñá‰ª∂2
      run: |
        cd openwrt
        [ -f "files" ] && mv files/* files
        [ -f "$CONFIG_FILE" ] && mv $CONFIG_FILE .config
        chmod +x $DIY_PART2
        $GITHUB_WORKSPACE/$DIY_PART2

    - name: ‰∏ãËΩΩËΩØ‰ª∂Ê∫ê
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: ÂÆö‰πâÊú∫ÂûãÂêçÁß∞
      run: |
        cd openwrt
        export TARGET_BOARD="$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' ${HOME_PATH}/.config)"
        export TARGET_SUBTARGET="$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' ${HOME_PATH}/.config)"
        export TARGET_PROFILE_DG="$(awk -F '[="]+' '/TARGET_PROFILE/{print $2}' ${HOME_PATH}/.config)"
        if [[ -n "$(grep -Eo 'CONFIG_TARGET.*x86.*64.*=y' ${HOME_PATH}/.config)" ]]; then
           export TARGET_PROFILE="x86-64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*x86.*=y' ${HOME_PATH}/.config)" ]]; then
           export TARGET_PROFILE="x86-32"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*armsr.*armv8.*=y' ${HOME_PATH}/.config)" ]]; then
           export TARGET_PROFILE="Armvirt_64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*armvirt.*64.*=y' ${HOME_PATH}/.config)" ]]; then
           export TARGET_PROFILE="Armvirt_64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*DEVICE.*=y' ${HOME_PATH}/.config)" ]]; then
           export TARGET_PROFILE="$(grep -Eo "CONFIG_TARGET.*DEVICE.*=y" ${HOME_PATH}/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')"
        else
           export TARGET_PROFILE="${TARGET_PROFILE_DG}"
        fi
        echo "DEVICE_NAME=${TARGET_PROFILE}" >> ${GITHUB_ENV}
        
    - name: ÁºìÂ≠òÂä†ÈÄü
      if: env.CACHEWRTBUILD_SWITCH == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{ env.DEVICE_NAME }}"
        prefix: ${{ github.workspace }}/openwrt
        
    - name: ÂºÄÂßãÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Êï¥ÁêÜÂõ∫‰ª∂ÂåÖ
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: ‰∏ä‰º†Âõ∫‰ª∂Ëá≥Artifacts
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-firmware-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Êï¥ÁêÜÂèëÂ∏É‰ø°ÊÅØ
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "üîó [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: ÂèëÂ∏ÉÂõ∫‰ª∂Âà∞release
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
